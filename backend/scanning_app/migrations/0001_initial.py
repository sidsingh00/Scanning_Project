# Generated by Django 5.2.7 on 2025-10-04 10:18

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('plan_type', models.CharField(choices=[('monthly', 'Monthly'), ('yearly', 'Yearly'), ('lifetime', 'Lifetime')], max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('razorpay_plan_id', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('features', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razorpay_order_id', models.CharField(max_length=100, unique=True)),
                ('razorpay_payment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pedning'), ('success', 'Success'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('subscription_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scanning_app.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_count', models.IntegerField(default=0)),
                ('free_scans_used', models.IntegerField(default=0)),
                ('max_free_scans', models.IntegerField(default=5)),
                ('is_premium', models.BooleanField(default=False)),
                ('premium_expiry', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('Payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scanning_app.payment')),
                ('subscription_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scanning_app.subscriptionplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ScannedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_data', models.TextField(help_text='The actual scanned content')),
                ('scan_type', models.CharField(choices=[('barcode', 'Barcode'), ('qr', 'QR Code'), ('text', 'Text'), ('image', 'Image'), ('document', 'Document')], help_text='Type of the scanned content', max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('archived', 'Archived')], default='pending', max_length=20)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional scan information')),
                ('image', models.ImageField(blank=True, null=True, upload_to='scans/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['scan_type'], name='scanning_ap_scan_ty_b36b9a_idx'), models.Index(fields=['status'], name='scanning_ap_status_8cab10_idx'), models.Index(fields=['timestamp'], name='scanning_ap_timesta_e301d7_idx'), models.Index(fields=['user'], name='scanning_ap_user_id_c579a8_idx')],
            },
        ),
    ]
